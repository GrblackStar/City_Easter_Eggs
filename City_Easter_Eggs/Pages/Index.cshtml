@page
@using City_Easter_Eggs.Controllers
@model IndexModel
@{
	ViewData["Title"] = "Home page";
}
@inject MapsService MapService;

<html>
<head>
	<title></title>
	<meta name="viewport" content="initial-scale=1.0, user-scalable=no">
	<meta charset="utf-8">
	<style type="text/css">
        html, body, #map {
            height: 100%;
            margin: 0px;
            padding: 0px
        }
    </style>

	<script type="module">
        // Request needed libraries.
        const { Map, InfoWindow } = await google.maps.importLibrary("maps");
        const { AdvancedMarkerElement } = await google.maps.importLibrary("marker");

        let map;
        let infoWindow = null; // https://developers.google.com/maps/documentation/javascript/advanced-markers/accessible-markers

        function AddMarkerToMap(position, name)
        {
            // Create an info window to share between markers.
            if (infoWindow == null) infoWindow = new InfoWindow();

            const normalEggImage = document.createElement("img");
            normalEggImage.src = "/NormalEgg.png";
            normalEggImage.width = 28;
            normalEggImage.height = 28;

            const marker = new AdvancedMarkerElement({
                map: map,
                position: position,
                title: name,
                content: normalEggImage,
            });

            // Add a click listener for each marker, and set up the info window.
            marker.addListener('click', ({ domEvent, latLng }) => {
                const { target } = domEvent;
                infoWindow.close();
                infoWindow.setContent(marker.title);
                infoWindow.open(marker.map, marker);
            });
        }

        async function initMap() {
            // get the current position of the device
            var myPos = await GetUserLocation();
            var position = { lat: myPos.coords.latitude, lng: myPos.coords.longitude };

            // The map, centered at the current position
            map = new Map(document.getElementById("map"), {
                zoom: 80,
                center: position,
                mapId: "DEMO_MAP_ID",
                mapTypeId: google.maps.MapTypeId.SATELLITE,

                zoomControl: true,
                mapTypeControl: false,
                scaleControl: true,
                streetViewControl: true,
                rotateControl: false,
                fullscreenControl: false
            });

            AddMarkerToMap(position, "Current Location");

            let pointsFromBackend = await HttpGet("/Points/GetPoints");
            pointsFromBackend = JSON.parse(pointsFromBackend);

            for (let i = 0; i < pointsFromBackend.length; i++) {
                const thisPoint = pointsFromBackend[i]
                const posForGMaps = { lat: thisPoint.latitude, lng: thisPoint.longitude }
                AddMarkerToMap(posForGMaps, thisPoint.name)
            }

            // map.addListener('click', function (e) {
            //     // Add a marker at the clicked location
            //     AddMarkerToMap(e.latLng, "Clicked Location");

            //     // Log the latitude and longitude of the clicked location
            //     console.log("Latitude: " + e.latLng.lat() + ", Longitude: " + e.latLng.lng());
            // });


            // map.addListener('click', function (e) {
            //     // Create a form for the popup
            //     const form = document.createElement('form');
            //     form.innerHTML = `
            //         <label for="lat">Latitude:</label><br>
            //         <input type="text" id="lat" name="lat" value="${e.latLng.lat()}"><br>
            //         <label for="lng">Longitude:</label><br>
            //         <input type="text" id="lng" name="lng" value="${e.latLng.lng()}"><br>
            //         <input type="submit" value="Save">
            //     `;

            //     // When the form is submitted, log the input values and prevent the form from being submitted
            //     form.addEventListener('submit', function (event) {
            //         event.preventDefault();
            //         console.log("Latitude: " + this.lat.value + ", Longitude: " + this.lng.value);
            //     });

            //     // If an info window already exists, close it
            //     if (infoWindow) {
            //         infoWindow.close();
            //     }

            //     // Create a new info window with the form as its content
            //     infoWindow = new InfoWindow({
            //         content: form
            //     });

            //     // Open the info window at the clicked location
            //     infoWindow.setPosition(e.latLng);
            //     infoWindow.open(map);
            // });


            map.addListener('click', function (e) {
                // Create a form for the popup
                //const form = document.createElement('form');
                // form.innerHTML = `
                //     <label for="name">Location name:</label><br>
                //     <input type="text" id="name" name="name" required><br>
                //     <label for="description">Description:</label><br>
                //     <textarea id="description" name="description" rows="5"></textarea><br>
                //     <label for="lat">Latitude:</label><br>
                //     <input type="text" id="lat" name="lat" value="${e.latLng.lat()}"><br>
                //     <label for="lng">Longitude:</label><br>
                //     <input type="text" id="lng" name="lng" value="${e.latLng.lng()}"><br>
                //     <input type="submit" value="Create Point">
                // `;

                const form = document.createElement('form');
                form.id = "createPointForm";
                form.method = "post";
                form.innerHTML = `
                    <style>
                        #createPointForm {
                            width: 300px;
                        }
                        #createPointForm button {
                            padding: 7px 20px;
                            font-size: 14px;
                            height: 35px;
                        }
                    </style>
                    <input type="hidden" id="userLocationLongitude" name="UserLocationLongitude" value="${e.latLng.lng()}">
                    <input type="hidden" id="userLocationLatitude" name="UserLocationLatitude" value="${e.latLng.lat()}">
                    <div class="mb-3">
                        <label for="name" class="form-label">Location name</label>
                        <span>
                            <label class="text-danger" style="font-size: 12px">* Required</label>
                        </span>
                        <input type="text" id="name" name="Name" class="form-control" required placeholder="Name">
                    </div>
                    <div class="mb-3">
                        <label for="description" class="form-label">Description</label>
                        <textarea id="description" name="Description" class="form-control" placeholder="Description" rows="5"></textarea>
                    </div>
                    <div class="mb-3 d-flex justify-content-between">
                        <button id="createPointSubmit" type="submit" class="btn btn-lg btn-primary">Create Point</button>
                        <button id="createPointCancel" type="button" class="btn btn-secondary" style="padding-left: 15px; padding-right: 15px">Cancel</button>
                    </div>
                `;

                // // Create a close button
                // const closeButton = document.createElement('button');
                // closeButton.innerHTML = 'X';
                // closeButton.style.fontSize = '20px'; // Adjust the size of the "X"
                // closeButton.style.float = 'right';

                // // When the close button is clicked, close the info window
                // closeButton.addEventListener('click', function () {
                //     infoWindow.close();
                // });

                // // Add the close button to the form
                // form.prepend(closeButton);

                // When the form is submitted, send a POST request to the server with the form data
                form.addEventListener('submit', function (event) {
                    event.preventDefault();

                    const data = {
                        Name: this.name.value,
                        Description: this.description.value,
                        UserLocationLongitude: this.lng.value,
                        UserLocationLatitude: this.lat.value
                    };

                    fetch('/CreatePointPageModel', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(data)
                    }).then(response => {
                        if (response.ok) {
                            console.log('Point created successfully');
                        } else {
                            console.log('Error: ' + response.statusText);
                        }
                    });
                });

                // If an info window already exists, close it
                if (infoWindow) {
                    infoWindow.close();
                }

                // Create a new info window with the form as its content
                infoWindow = new InfoWindow({
                    content: form
                });

                // Open the info window at the clicked location
                infoWindow.setPosition(e.latLng);
                infoWindow.open(map);

                // Event listener to the close button of the info window to close it. 
                // Using "domready" ensures that the dom is loaded and can find the component
                google.maps.event.addListener(infoWindow, 'domready', function() {
                    document.getElementById('createPointCancel').addEventListener('click', function () {
                        infoWindow.close();
                    });
                });
            });


        }

        initMap();
    </script>
</head>
<body>
    <a asp-page="/CreatePointPage" style="margin-bottom: 20px" class="btn btn-primary">Add New Point</a>
    <div style="height: 700px" id="map"></div>
<script>
        const apiKey = "@MapService.GetAPIKey()";
        (g => { var h, a, k, p = "The Google Maps JavaScript API", c = "google", l = "importLibrary", q = "__ib__", m = document, b = window; b = b[c] || (b[c] = {}); var d = b.maps || (b.maps = {}), r = new Set, e = new URLSearchParams, u = () => h || (h = new Promise(async (f, n) => { await (a = m.createElement("script")); e.set("libraries", [...r] + ""); for (k in g) e.set(k.replace(/[A-Z]/g, t => "_" + t[0].toLowerCase()), g[k]); e.set("callback", c + ".maps." + q); a.src = `https://maps.${c}apis.com/maps/api/js?` + e; d[q] = f; a.onerror = () => h = n(Error(p + " could not load.")); a.nonce = m.querySelector("script[nonce]")?.nonce || ""; m.head.append(a) })); d[l] ? console.warn(p + " only loads once. Ignoring:", g) : d[l] = (f, ...n) => r.add(f) && u().then(() => d[l](f, ...n)) })
            ({ key: apiKey, v: "weekly" });
    </script>
</body>
</html>