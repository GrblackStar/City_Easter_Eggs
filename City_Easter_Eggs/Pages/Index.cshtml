@page
@using City_Easter_Eggs.Controllers
@model IndexModel
@{
    ViewData["Title"] = "Home page";
}
@inject MapsService MapService;

<html>
<head>
    <title></title>
    <meta name="viewport" content="initial-scale=1.0, user-scalable=no">
    <meta charset="utf-8">
    <style type="text/css">
        html, body, #map {
            height: 100%;
            margin: 0px;
            padding: 0px
        }
    </style>

    <script type="module">
        const IsUserLoggedIn = "@User.Identity!.IsAuthenticated" == 'True';
        window.IsUserLoggedIn = IsUserLoggedIn;

        // Request needed libraries.
        const { Map, InfoWindow } = await google.maps.importLibrary("maps");
        const { AdvancedMarkerElement } = await google.maps.importLibrary("marker");

        let map;
        var panelPointInfo = null;
        var panelPointInfo_CurrentMarker = null;
        
        // https://developers.google.com/maps/documentation/javascript/advanced-markers/accessible-markers
        let panelCreatePoint = null;
        var oldMarkers = [];
        var userMarker = null;
        var watchID;
        var geoLoc;
        let lastPos = null;

        var pointsFromBackend = [];
        
        function AddPointToMap(pointIndex)
        {
            var pointData = pointsFromBackend[pointIndex];
            var thisPoint = pointData.point;
            const position = { lat: thisPoint.latitude, lng: thisPoint.longitude };
            const name = thisPoint.name;

            const normalEggImage = document.createElement("img");
            normalEggImage.src = "/NormalEgg.png";
            normalEggImage.width = 28;
            normalEggImage.height = 28;

            const marker = new AdvancedMarkerElement({
                map: map,
                position: position,
                title: name,
                content: normalEggImage,
            });

            // Add a click listener for each marker, and set up the info window.
            marker.addListener('click', ({ domEvent, latLng }) => {
                var pointData = pointsFromBackend[pointIndex];
                var thisPoint = pointData.point;
                var likes = thisPoint.likes;
                var description = thisPoint.description;
                var markerId = thisPoint.pointId;
                var likedByUser = pointData.likedByCurrentUser;
                var favoriteByUser = pointData.favoriteByCurrentUser;
                console.dir(pointData)

                const { target } = domEvent;

                let isLikedByUser = likedByUser;
                let likeButtonListener = function () {
                    if (panelPointInfo_CurrentMarker) {
                        console.log('Like button clicked');
                        console.log(panelPointInfo_CurrentMarker.title);

                        if (markerId == null) return;

                        // Calculate the distance between the user's current location and the marker's location in meters
                        let distance = getDistanceInMeters(lastPos, position);

                        // Determine the endpoint based on whether the point is already liked by the user
                        if (distance <= 50) {
                            // Determine the endpoint based on whether the point is already liked by the user
                            let endpoint = isLikedByUser ? '/Points/UnlikePoint' : '/Points/LikePoint';

                            fetch(endpoint, {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json',
                                },
                                body: JSON.stringify({ markerId: markerId }),
                            })
                            .then(response => response.json())
                            .then(data => {
                                pointsFromBackend[pointIndex] = data

                                // Update the likes label
                                document.getElementById('likes').textContent = data.point.likes;
                                // Change the like button image based on whether the point is liked by the user
                                let likeButtonImage = document.querySelector('#likeButton img');
                                likeButtonImage.src = isLikedByUser ? 'LikeIcon.png' : 'LikedIcon.png';
                                isLikedByUser = !isLikedByUser;
                            })
                            .catch((error) => {
                                console.error('Error:', error);
                            });
                        } else {
                            // If the distance is more than 50 meters, log a message and do not make the fetch request
                            console.log('You are too far away to like this point.');
                        }
                    }
                };

                let isFavoriteByUser = favoriteByUser;
                let favoriteButtonListener = function () {
                    if (panelPointInfo_CurrentMarker) {
                        console.log('Favorite button clicked');
                        console.log(panelPointInfo_CurrentMarker.title);

                        // Determine the endpoint based on whether the point is already saved by the user
                        let endpoint = isFavoriteByUser ? '/Points/FavoriteRemovePoint' : '/Points/FavoriteAddPoint';

                        if (markerId == null) return;
                        fetch(endpoint, {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify({ markerId: markerId }),
                        })
                        .then(response => response.json())
                        .then(data => {
                            pointsFromBackend[pointIndex] = data
                            // Change the like button image
                            let heartButtonImage = document.querySelector('#favoriteButton img');
                            heartButtonImage.src = isFavoriteByUser ? 'HeartIcon.png' : 'HeartedIcon.png';
                            isFavoriteByUser = !isFavoriteByUser;
                        })
                        .catch((error) => {
                            console.error('Error:', error);
                        });
                    }
                };

                if (isInfoWindowOpen(panelCreatePoint))
                    panelCreatePoint.close();

                if (isInfoWindowOpen(panelPointInfo))
                    panelPointInfo.close();
                
                panelPointInfo = new InfoWindow();
                panelPointInfo.setContent(`
                    <style>
                        #infoWindowContent {
                            min-width: 200px;
                            max-width: 400px;
                            max-height: 600px;
                        }
                        #nameSection, #descriptionSection {
                            margin-bottom: 15px;
                        }
                        #name, #description {
                            margin-left: 10px;
                        }
                        #buttonSection {
                            margin-top: 20px;
                            display: flex;
                            justify-content: space-between;
                        }
                        #likeSection {
                            display: flex;
                        }
                        #likeButton, #favoriteButton {
                            border: none;
                            background: none;
                            padding: 0;
                            outline: 0;
                            width: 25px;
                            height: 25px;
                        }   
                    </style>

                    <div id="infoWindowContent">
                        <div id="nameSection">
                            <label for="name" class="form-label" style="font-weight: bold; font-size: 16px;">Name</label>
                            <div id="name">${marker.title}</div>
                        </div>
                        ${description ? `
                            <div id="descriptionSection">
                                <label for="description" class="form-label" style="font-weight: bold; font-size: 16px;">Description</label>
                                <div id="description">${description}</div>
                            </div>
                        ` : ''}
                        <div id="buttonSection">
                            <div id="likeSection">
                                <button id="likeButton"><img src="${likedByUser ? 'LikedIcon.png' : 'LikeIcon.png'}" alt="Like" style="width: 25px; height: 25px;"></button>
                                <label id="likes" style="font-weight: normal; font-size: 20px; margin-left: 5px; padding: 2px;">${likes}</label>
                            </div>
                            <button id="favoriteButton"><img src="${favoriteByUser ? 'HeartedIcon.png' : 'HeartIcon.png'}" alt="Favorite" style="width: 25px; height: 25px;"></button>
                        </div>
                    </div>
                `);
                panelPointInfo.open(marker.map, marker);

                panelPointInfo_CurrentMarker = marker;

                google.maps.event.addListener(panelPointInfo, 'domready', function () {
                    var likeButton = document.getElementById('likeButton');
                    var favoriteButton = document.getElementById('favoriteButton');
                    if (likeButton != null) likeButton.addEventListener('click', likeButtonListener);
                    if (favoriteButton != null) favoriteButton.addEventListener('click', favoriteButtonListener);
                });
            });
            return marker;
        }

        function AddMarkerToMap(position, name) {
            const normalEggImage = document.createElement("img");
            normalEggImage.src = "/EasterEgg.png";
            normalEggImage.width = 28;
            normalEggImage.height = 28;

            const marker = new AdvancedMarkerElement({
                map: map,
                position: position,
                title: name,
                content: normalEggImage,
            });
            // Add a click listener for each marker, and set up the info window.
            marker.addListener('click', ({ domEvent, latLng }) => {
                const { target } = domEvent;

                if (isInfoWindowOpen(panelCreatePoint))
                    panelCreatePoint.close();

                if (isInfoWindowOpen(panelPointInfo))
                    panelPointInfo.close();
                
                panelPointInfo = new InfoWindow();
                panelPointInfo.setContent(marker.title);
                panelPointInfo.open(marker.map, marker);

                panelPointInfo_CurrentMarker = marker;
            });

            return marker;
        }

        async function drawPoints() {
            var httpGetPoints = await HttpGet("/Points/GetPoints");
            pointsFromBackend = JSON.parse(httpGetPoints);
            //debugger;

            var newMarkers = []
            for (let i = 0; i < pointsFromBackend.length; i++) {
                newMarkers[i] = AddPointToMap(i);
            }
            // Remove old markers after drawing new ones and swap the arrays for the next draw
            removeOldMarkers();
            oldMarkers = newMarkers;
        }

        function removeOldMarkers() {
            for (var i = 0; i < oldMarkers.length; i++) {
                oldMarkers[i].setMap(null);
            }
            oldMarkers = [];
        }
        // used for small distance calculations, as it ignores the curvature of 
        function GetPosDist(pointA, pointB) {
            var a = pointA.lat - pointB.lat;
            var b = pointA.lng - pointB.lng;

            return Math.sqrt(a * a + b * b);
        }

        function getDistanceOfTwoPointsInKilometers(pointA, pointB)
        {
            let lat1 = pointA.lat;
            let lon1 = pointA.lng;
            let lat2 = pointB.lat;
            let lon2 = pointB.lng;
    
            // The math module contains a function named toRadians which converts from degrees to radians.
            lon1 =  lon1 * Math.PI / 180;
            lon2 = lon2 * Math.PI / 180;
            lat1 = lat1 * Math.PI / 180;
            lat2 = lat2 * Math.PI / 180;
    
            // Haversine formula 
            let dlon = lon2 - lon1; 
            let dlat = lat2 - lat1;
            let a = Math.pow(Math.sin(dlat / 2), 2) + Math.cos(lat1) * Math.cos(lat2) * Math.pow(Math.sin(dlon / 2),2);
                
            let c = 2 * Math.asin(Math.sqrt(a));
    
            // Radius of earth in kilometers. Use 3956 for miles
            let r = 6371;
    
            // calculate the result
            return(c * r);
        }

        function getDistanceInMeters (pointA, pointB) {
            return getDistanceOfTwoPointsInKilometers(pointA, pointB) * 1000;
        }

        function showLocation(position) {
            var latitude = position.coords.latitude;
            var longitude = position.coords.longitude;
            var pos = { lat: latitude, lng: longitude };

            if (lastPos != null) {
                var dist = GetPosDist(lastPos, pos);
                console.log(dist);
                if (dist < 0.001) return;
            }
            lastPos = pos;

            // If the user marker doesn't exist, create it.
            if (!userMarker) {
                userMarker = AddMarkerToMap(pos, "Current Location", true);
                userMarker.optimized = false;
                userMarker.zIndex = 99999999;
            }
            else {
                // If it does exist, update its position.
                userMarker.position = pos;
                //userMarker.setPosition(pos);
            }

            //const center = new google.maps.LatLng(latitude, longitude);
            //map.panTo(center);

            console.log("Latitude : " + latitude + " Longitude: " + longitude);
        }

        async function updateLocation() {
            if (navigator.geolocation) {
                let position = await GetUserLocation();
                showLocation(position);
            } else {
                alert("Sorry, browser does not support geolocation!");
            }
            setTimeout(updateLocation, 2000)
        }

        function errorHandler(err) {
            if (err.code == 1) {
                alert("Error: Access is denied!");
            } else if (err.code == 2) {
                alert("Error: Position is unavailable!");
            }
        }

        function createCenterControl(map) {
            const controlButton = document.createElement("button");
            controlButton.className = "btn btn-lg btn-primary";
            controlButton.textContent = "Back to my location";
            controlButton.addEventListener("click", async function () {
                if (map != null && lastPos != null) {
                // it shouldn't get the position again, because otherwise it could get the pos wrong and update it
                map.panTo(lastPos);
            }
            });

            return controlButton;
        }

        async function initMap() {
            // The map, centered at the current position
            var myPos = await GetUserLocation();
            var position = { lat: myPos.coords.latitude, lng: myPos.coords.longitude };
            map = new Map(document.getElementById("map"), {
                zoom: 80,
                mapId: "DEMO_MAP_ID",
                mapTypeId: google.maps.MapTypeId.SATELLITE,
                center: position,
                zoomControl: true,
                mapTypeControl: false,
                scaleControl: true,
                streetViewControl: true,
                rotateControl: false,
                fullscreenControl: false,
                gestureHandling: "greedy"
            });

            showLocation(myPos);
            drawPoints();

            map.addListener('click', function (e) {
                let distance = getDistanceInMeters(lastPos, { lat: e.latLng.lat(), lng: e.latLng.lng() });
                if (distance <= 50) { 
                    const form = document.createElement('form');
                    form.id = "createPointForm";
                    form.innerHTML = `
                        <style>
                            #createPointForm {
                                width: 300px;
                            }
                            #createPointForm button {
                                padding: 7px 20px;
                                font-size: 14px;
                                height: 35px;
                            }
                            #mainText {
                                font-size: 16px;
                                padding-bottom: 10px;
                                font-weight: bold;
                            }
                        </style>
                        <input type="hidden" id="userLocationLongitude" name="UserLocationLongitude" value="${e.latLng.lng()}">
                        <input type="hidden" id="userLocationLatitude" name="UserLocationLatitude" value="${e.latLng.lat()}">
                        <div>
                            <label id="mainText" for="name" class="form-label">ADD A POINT</label>
                        </div>
                        <div id="createPointErrorContainer" class="text-danger mb-2" role="alert"></div>
                        <div class="mb-3">
                            <label for="name" class="form-label">Location name</label>
                            <span>
                                <label class="text-danger" style="font-size: 12px">* Required</label>
                            </span>
                            <input type="text" id="name" name="Name" class="form-control" required placeholder="Name">
                        </div>
                        <div class="mb-3">
                            <label for="description" class="form-label">Description</label>
                            <textarea id="description" name="Description" class="form-control" placeholder="Description" rows="5"></textarea>
                        </div>
                        <div class="mb-3 d-flex justify-content-between">
                            <button id="createPointSubmit" type="submit" class="btn btn-lg btn-primary">Create Point</button>
                            <button id="createPointCancel" type="button" class="btn btn-secondary" style="padding-left: 15px; padding-right: 15px">Cancel</button>
                        </div>
                    `;

                    form.addEventListener('submit', function (event) {
                        event.preventDefault();

                        var formData = new FormData(form);
                        var object = {};
                        formData.forEach((value, key) => object[key] = value);
                        var json = JSON.stringify(object);

                        fetch('/Points/CreatePoint', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: json,
                        }).then(response => {
                            if (response.ok) {
                                //console.log('Point created successfully');
                                panelCreatePoint.close();
                                drawPoints();
                            } else {
                                response.json().then(x => {
                                    var errorContainer = $("#createPointForm").find("#createPointErrorContainer")
                                    errorContainer.empty()

                                    var errors = x.errors
                                    var errorKeys = Object.keys(errors);

                                    for (var i = 0; i < errorKeys.length; i++) {
                                        var thisProp = errorKeys[i];
                                        var array = errors[thisProp];
                                        for (var ii = 0; ii < array.length; ii++) {
                                            errorContainer.append($('<div>', {
                                                text: array[ii]
                                            }));
                                        }
                                    }
                                });
                            }
                        });
                    });

                    if (isInfoWindowOpen(panelPointInfo) || isInfoWindowOpen(panelCreatePoint)) {
                        if (isInfoWindowOpen(panelPointInfo))
                            panelPointInfo.close();
                        if (isInfoWindowOpen(panelCreatePoint))
                            panelCreatePoint.close();
                        return;
                    }

                    // If an info window already exists, reuse it
                    if (isInfoWindowOpen(panelCreatePoint)) {
                    }
                    else {
                        // Create a new info window with the form as its content
                        panelCreatePoint = new InfoWindow({
                            content: form
                        });
                        panelCreatePoint.open(map);

                        // Event listener to the close button of the info window to close it.
                        // Using "domready" ensures that the dom is loaded and can find the component
                        google.maps.event.addListener(panelCreatePoint, 'domready', function () {
                            var cancelButton = document.getElementById('createPointCancel');
                            if (!cancelButton) return;
                            cancelButton.addEventListener('click', function () {
                                panelCreatePoint.close();
                            });
                        });
                    }

                    // Open the info window at the clicked location
                    panelCreatePoint.setPosition(e.latLng);
                } else {
                    console.log('You are too far away to create a point here.');
                }
            });

            const centerControlDiv = document.createElement("div");
            const centerControl = createCenterControl(map);

            centerControlDiv.appendChild(centerControl);
            map.controls[google.maps.ControlPosition.TOP_LEFT].push(centerControlDiv);
        }

        

        await initMap();
        await updateLocation();
    </script>
</head>
<body>
    <div style="height: 700px" id="map"></div>
    <script>
        const apiKey = "@MapService.GetAPIKey()";
        (g => { var h, a, k, p = "The Google Maps JavaScript API", c = "google", l = "importLibrary", q = "__ib__", m = document, b = window; b = b[c] || (b[c] = {}); var d = b.maps || (b.maps = {}), r = new Set, e = new URLSearchParams, u = () => h || (h = new Promise(async (f, n) => { await (a = m.createElement("script")); e.set("libraries", [...r] + ""); for (k in g) e.set(k.replace(/[A-Z]/g, t => "_" + t[0].toLowerCase()), g[k]); e.set("callback", c + ".maps." + q); a.src = `https://maps.${c}apis.com/maps/api/js?` + e; d[q] = f; a.onerror = () => h = n(Error(p + " could not load.")); a.nonce = m.querySelector("script[nonce]")?.nonce || ""; m.head.append(a) })); d[l] ? console.warn(p + " only loads once. Ignoring:", g) : d[l] = (f, ...n) => r.add(f) && u().then(() => d[l](f, ...n)) })
            ({ key: apiKey, v: "weekly" });

        function isInfoWindowOpen(infoWindow) {
            if (!infoWindow) return false;
            var map = infoWindow.getMap();
            return (map !== null && typeof map !== "undefined");
        }
    </script>
</body>
</html>