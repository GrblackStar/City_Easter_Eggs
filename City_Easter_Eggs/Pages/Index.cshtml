@page
@using City_Easter_Eggs.Controllers
@model IndexModel
@{
	ViewData["Title"] = "Home page";
}
@inject MapsService MapService;

<html>
<head>
	<title></title>
	<meta name="viewport" content="initial-scale=1.0, user-scalable=no">
	<meta charset="utf-8">
	<style type="text/css">
        html, body, #map {
            height: 100%;
            margin: 0px;
            padding: 0px
        }
    </style>

	<script type="module">
        // Request needed libraries.
        const { Map, InfoWindow } = await google.maps.importLibrary("maps");
        const { AdvancedMarkerElement } = await google.maps.importLibrary("marker");

        let map;
        let infoWindow = null; // https://developers.google.com/maps/documentation/javascript/advanced-markers/accessible-markers
        var oldMarkers = [];
        var newMarkers = [];

        function AddMarkerToMap(position, name, isUser)
        {
            // Create an info window to share between markers.
            if (infoWindow == null) infoWindow = new InfoWindow();

            const normalEggImage = document.createElement("img");
            if (isUser) normalEggImage.src = "/EasterEgg.png";
            else normalEggImage.src = "/NormalEgg.png";
            normalEggImage.width = 28;
            normalEggImage.height = 28;

            const marker = new AdvancedMarkerElement({
                map: map,
                position: position,
                title: name,
                content: normalEggImage,
            });
            newMarkers.push(marker);

            // Add a click listener for each marker, and set up the info window.
            marker.addListener('click', ({ domEvent, latLng }) => {
                const { target } = domEvent;
                infoWindow.close();
                infoWindow.setContent(marker.title);
                infoWindow.open(marker.map, marker);
            });

            return marker;
        }

        async function drawPoints() {
            let pointsFromBackend = await HttpGet("/Points/GetPoints");
            pointsFromBackend = JSON.parse(pointsFromBackend);

            for (let i = 0; i < pointsFromBackend.length; i++) {
                const thisPoint = pointsFromBackend[i]
                const posForGMaps = { lat: thisPoint.latitude, lng: thisPoint.longitude }
                AddMarkerToMap(posForGMaps, thisPoint.name, false)
            }
            // Remove old markers after drawing new ones and swap the arrays for the next draw
            removeOldMarkers();
            oldMarkers = newMarkers;
            newMarkers = [];
        }

        function removeOldMarkers() {
            for (var i = 0; i < oldMarkers.length; i++) {
                oldMarkers[i].setMap(null);
            }
            oldMarkers = [];
        }

        let userMarker = null;
        var watchID;
        var geoLoc;
        let lastPos = null;

        function GetPosDist(pointA, pointB)
        {
            var a = pointA.lat - pointB.lat;
            var b = pointA.lng - pointB.lng;

            return Math.sqrt(a * a + b * b);
        }

        function showLocation(position) {
            var latitude = position.coords.latitude;
            var longitude = position.coords.longitude;
            var pos = { lat: latitude, lng: longitude };

            if (lastPos != null)
            {
                var dist = GetPosDist(lastPos, pos);
                console.log(dist);
                if (dist < 0.001) return;
            }
            lastPos = pos;

            // If the user marker doesn't exist, create it.
            if (userMarker == null)
            {
                userMarker = AddMarkerToMap(pos, "Current Location", true);
                userMarker.optimized = false;
                userMarker.zIndex = 99999999;
            }
            else
            {
                // If it does exist, update its position.
                userMarker.position = pos;
            }

            const center = new google.maps.LatLng(latitude, longitude);
            map.panTo(center);

            console.log("Latitude : " + latitude + " Longitude: " + longitude);
        }

        async function updateLocation() {
            if (navigator.geolocation) {
                let position = await GetUserLocation();
                showLocation(position);
            } else {
                alert("Sorry, browser does not support geolocation!");
            }
            setTimeout(updateLocation, 2000)
        }

        function errorHandler(err) {
            if (err.code == 1) {
                alert("Error: Access is denied!");
            } else if (err.code == 2) {
                alert("Error: Position is unavailable!");
            }
        }

        async function initMap() {
            // The map, centered at the current position
            map = new Map(document.getElementById("map"), {
                zoom: 80,
                mapId: "DEMO_MAP_ID",
                mapTypeId: google.maps.MapTypeId.SATELLITE,

                zoomControl: true,
                mapTypeControl: false,
                scaleControl: true,
                streetViewControl: true,
                rotateControl: false,
                fullscreenControl: false,
                gestureHandling: "greedy"
            });

            drawPoints();

            map.addListener('click', function (e) {
                const form = document.createElement('form');
                form.id = "createPointForm";
                form.innerHTML = `
                    <style>
                        #createPointForm {
                            width: 300px;
                        }
                        #createPointForm button {
                            padding: 7px 20px;
                            font-size: 14px;
                            height: 35px;
                        }
                        #mainText {
                            font-size: 16px;
                            padding-bottom: 10px;
                            font-weight: bold;
                        }
                    </style>
                    <input type="hidden" id="userLocationLongitude" name="UserLocationLongitude" value="${e.latLng.lng()}">
                    <input type="hidden" id="userLocationLatitude" name="UserLocationLatitude" value="${e.latLng.lat()}">
                    <div>
                        <label id="mainText" for="name" class="form-label">ADD A POINT</label>
                    </div>
                    <div class="mb-3">
                        <label for="name" class="form-label">Location name</label>
                        <span>
                            <label class="text-danger" style="font-size: 12px">* Required</label>
                        </span>
                        <input type="text" id="name" name="Name" class="form-control" required placeholder="Name">
                    </div>
                    <div class="mb-3">
                        <label for="description" class="form-label">Description</label>
                        <textarea id="description" name="Description" class="form-control" placeholder="Description" rows="5"></textarea>
                    </div>
                    <div class="mb-3 d-flex justify-content-between">
                        <button id="createPointSubmit" type="submit" class="btn btn-lg btn-primary">Create Point</button>
                        <button id="createPointCancel" type="button" class="btn btn-secondary" style="padding-left: 15px; padding-right: 15px">Cancel</button>
                    </div>
                `;

                form.addEventListener('submit', function (event) {
                    event.preventDefault();

                    var formData = new FormData(form);
                    var object = {};
                    formData.forEach((value, key) => object[key] = value);
                    var json = JSON.stringify(object);

                    fetch('/Points/CreatePoint', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: json,
                    }).then(response => {
                        if (response.ok) {
                            //console.log('Point created successfully');
                            infoWindow.close();
                            drawPoints();
                        } else {
                            response.json().then(x => x.errors);
                        }
                    });
                });

                // If an info window already exists, close it
                if (infoWindow) {
                    infoWindow.close();
                }

                // Create a new info window with the form as its content
                infoWindow = new InfoWindow({
                    content: form
                });

                // Open the info window at the clicked location
                infoWindow.setPosition(e.latLng);
                infoWindow.open(map);

                // Event listener to the close button of the info window to close it. 
                // Using "domready" ensures that the dom is loaded and can find the component
                google.maps.event.addListener(infoWindow, 'domready', function() {
                    var cancelButton = document.getElementById('createPointCancel');
                    if (!cancelButton) return;
                    cancelButton.addEventListener('click', function () {
                        infoWindow.close();
                    });
                });


            });


        }

        initMap();
        updateLocation();
    </script>
</head>
<body>
    <div style="height: 700px" id="map"></div>
<script>
        const apiKey = "@MapService.GetAPIKey()";
        (g => { var h, a, k, p = "The Google Maps JavaScript API", c = "google", l = "importLibrary", q = "__ib__", m = document, b = window; b = b[c] || (b[c] = {}); var d = b.maps || (b.maps = {}), r = new Set, e = new URLSearchParams, u = () => h || (h = new Promise(async (f, n) => { await (a = m.createElement("script")); e.set("libraries", [...r] + ""); for (k in g) e.set(k.replace(/[A-Z]/g, t => "_" + t[0].toLowerCase()), g[k]); e.set("callback", c + ".maps." + q); a.src = `https://maps.${c}apis.com/maps/api/js?` + e; d[q] = f; a.onerror = () => h = n(Error(p + " could not load.")); a.nonce = m.querySelector("script[nonce]")?.nonce || ""; m.head.append(a) })); d[l] ? console.warn(p + " only loads once. Ignoring:", g) : d[l] = (f, ...n) => r.add(f) && u().then(() => d[l](f, ...n)) })
            ({ key: apiKey, v: "weekly" });
    </script>
</body>
</html>